
<template>
  <div v-show="show" @touchmove.prevent.stop="noop">
    <div class="mask" @click="close" ></div>
    <div class="wrap" >
      <div class="title">
        <div class="text">选择行业</div>
        <div @click="subFn" class="btn">确认</div>
      </div>
      <div v-if="isReady">
        <fun-tree
          ele-id="select_treade"
          ref="tree"
          :has="has"
          :single="single"
          :conf="propsConf"
          :tree-data="treeData"
          :show-checkbox="true"
          :check-only-leaf="true"
          nodeKey="id"
        >
        </fun-tree>
      </div>
<!--      <div @click="subFn" class="btn">提交</div>-->
    </div>
  </div>
</template>
<script>

  import wepy from '@wepy/core'
  import {
    bizIndustryList
  } from '../api/store'

  wepy.component({
    props: {
      has: {
        type: Array,
        default: []
      },
      // 单选
      single: {
        type: Boolean,
        default: false
      },
      show: {
        type: Boolean,
        default: false
      },
      bottomHeight: {
        type: Number || String,
        default: 0
      },
      direction: {
        type: String,
        default: 'top' // 方向  top，bottom，left，right
      }
    },
    data: {
      isReady: false,
      // showTree: false,
      timer: null,
      iftoggle: false,
      translateValue: -100, // 位移距离
      treeData: [],
      maskOpacity: 0,
      propsConf: {
        // icon:'iconname',
        children: 'child', // 指定子树为节点对象的某个属性值
        label: 'industry_name', // 指定节点标签为节点对象的某个属性值
        disabled: 'disabled'// 指定节点选择框是否禁用为节点对象的某个属性值
      }
    },
    watch: {
      show: {
        handler(val) {
          val && this.open()
          !val && this.close()
        }
      }
    },
    created() {
    // setTimeout(()=>{
      //   this.treeData = mockData
      //   this.isReady = true
      // },200)
      bizIndustryList().then(res => {
        this.treeData = res.data// mockData
        this.isReady = true
      })
    },
    methods: {
      subFn() {
        let checkNodeList = this.$refs.tree.getCheckedNodes()
        this.$emit('onConfirm', checkNodeList)
      },
      loadNode() {
      },
      noop() {

      },
      close() {

      },
      open() {

      },
      handleNodeClick(obj) {
        console.log('handleNodeClick', obj)
      },
      handleNodeExpand(obj) {
        console.log('handleNodeExpand', JSON.stringify(obj))
      }
    }
  })
</script>
<style lang="scss">

  @import "../assets/variables.scss";
  .title{
    display: flex;
    align-items: center;
    padding: 0px 10px 15px ;
    .text{
      flex: 1;
      text-align: center;
    }
    .btn{
      background: $fun-primary-color;
      color: #333;
      font-size: 14px;
      padding:6px 12px;
      border-radius: 2px;
      color: #fff;
      text-align: center;
    }
  }

  .mask{
    position: fixed;
    z-index: 9;
    background: rgba(0, 0, 0 , .6);
    height: 100%;
    width: 100%;
    top: 0px;
    left: 0px;
    overflow: hidden;
  }
  .wrap{
    padding: 15px 0 30px;
    position: fixed;
    left: 0;
    width: 750rpx;
    z-index: 10;
    background: #FFFFFF;
    overflow: hidden;
    bottom: 0;
  }

</style>
<config>
  {
    "usingComponents": {
      "fun-tree": "~@/components/fun-tree"
    }
  }
</config>
