<template>
  <div v-show="showTree" @touchmove.prevent.stop="noop">
    <div class="mask" @click="close" :style="{opacity:maskOpacity}"></div>
    <div class="wrap" :style="_location">
      <div class="text-center padding10-r">选择行业</div>
      <block v-if="isReady">
        <ly-tree
          ref="tree"
          :tree-data="treeData"
          :showCheckbox="true"
          :checkOnlyLeaf="true"
          :props="propsConf"
          node-key="industry_name"
          @node-expand="handleNodeExpand"
          @node-click="handleNodeClick">
        </ly-tree>
      </block>
      <div @click="subFn" class="btn">提交</div>
    </div>
  </div>
</template>
<script>
  const mockData = [
    {
      label: '一级 1',
      children: [{
        label: '二级 1-1',
        children: [{
          label: '三级 1-1-1'
        }]
      }]
    }, {
      label: '一级 2',
      children: [{
        label: '二级 2-1',
        children: [{
          label: '三级 2-1-1'
        }]
      }, {
        label: '二级 2-2',
        children: [{
          label: '三级 2-2-1'
        }]
      }]
    }, {
      label: '一级 3',
      children: [{
        label: '二级 3-1',
        children: [{
          label: '三级 3-1-1'
        }]
      }, {
        label: '二级 3-2',
        children: [{
          label: '三级 3-2-1'
        }]
      }]
    }]
  import wepy from '@wepy/core'

  wepy.component({
    props: {
      show: {
        type: Boolean,
        default: false
      },
      bottomHeight: {
        type: Number || String,
        default: 0
      },
      direction: {
        type: String,
        default: 'top' // 方向  top，bottom，left，right
      }
    },
    data: {
      isReady: false,
      showTree: false,
      timer: null,
      iftoggle: false,
      translateValue: -100, // 位移距离
      treeData: [],
      maskOpacity: 0,
      propsConf: {
        children: 'child', // 指定子树为节点对象的某个属性值
        label: 'industry_name', // 指定节点标签为节点对象的某个属性值
        disabled: 'disabled' // 指定节点选择框是否禁用为节点对象的某个属性值
      }
    },
    watch: {
      show: {
        handler(val) {
          val && this.open()
          !val && this.close()
        }
      }
    },
    created() {

      this.treeData = mockData
      this.isReady = true
      // bizIndustryList().then(res => {
      //   this.treeData = res.data// mockData
      //   this.isReady = true
      // })
    },
    methods: {
      subFn() {
        let checkNodeList = this.$refs.tree.getCheckedNodes()
        console.log(checkNodeList)
        this.$emit('onConfirm', checkNodeList)
      },
      loadNode() {
      },
      noop() {

      },
      close() {

      },
      open() {

      },
      handleNodeClick(obj) {
        console.log('handleNodeClick', obj)
      },
      handleNodeExpand(obj) {
        console.log('handleNodeExpand', JSON.stringify(obj))
      }
    }
  })
</script>
<style lang="scss">
  .mask{
    position: fixed;
    z-index: 9;
    background: rgb(0, 0, 0 , .6);
    height: 100%;
    width: 100%;
    top: 0px;
    left: 0px;
    overflow: hidden;
    transform: translateY(100%);
  }
  .wrap{
    position: fixed;
    left: 0;
    z-index: 10;
    background: #FFFFFF;
    transform: translateY(100%);
    overflow: hidden;
  }
  .btn{
    height: 44px;
    width: 100%;
    background: white;
    color: white;
    line-height: 44px;
    text-align: center;
  }
</style>
