<template>
	<view>
<!--    :class="node.classStr"-->
<!--    :style="newStyleStr || node.styleStr"-->
		<image class="wx-parse-img"
		       :mode="node.attr.mode"
		       :lazy-load="node.attr.lazyLoad"
		       :data-src="node.attr.src"
		       :src="node.attr.src"
		       @click="wxParseImgTap"
		       @load="wxParseImgLoad"
		>
    </image>


	</view>
</template>

<script>
  import wepy from '@wepy/core'
  import { objTranslate } from '@/common/helper'

  wepy.component({

    props: {
      node: {
        type: Object,
        default () {
          return {}
        }
      }
    },
    watch:{
      // node:{
      //   immediate:true,
      //   deep:true,
      //   handler(val){
      //     if(!val || JSON.stringify(val)==='{}')return;
      //     if(val.hasOwnProperty('attr')){
      //       this._init_func()
      //     }
      //   }
      // }
    },
    data: {
      newStyleStr: '',
      bolburl: '',
      loading: true,
      preview: true
    },

    ready () {

    },
    methods: {
      _init_func(){
        console.log(objTranslate(this.node))
        wx.downloadFile({
          url: this.node.attr.src, // 仅为示例，并非真实的资源
          success: (res) => {
            if (res.statusCode === 200 && res.tempFilePath) {
              this.loading = false
              this.bolburl = res.tempFilePath
            }
          }
        })
      },
      wxParseImgTap(e) {
        if (!this.preview) return
        const { src } = e.currentTarget.dataset
        if (!src) return
        let parent = this.$parent
        while (!parent.preview || typeof parent.preview !== 'function') {
          // TODO 遍历获取父节点执行方法
          parent = parent.$parent
        }
        parent.preview(src, e)
      },
      // 图片视觉宽高计算函数区
      wxParseImgLoad(e) {

        this.loading = false
        const { src } = e.currentTarget.dataset

        const { width, height } = e.$wx.detail

        const recal = this.wxAutoImageCal(width, height)

        const { imageheight, imageWidth } = recal
        const { padding, mode } = this.node.attr// 删除padding
        // const { mode } = this.node.attr;

        const { styleStr } = this.node
        const imageHeightStyle = mode === 'widthFix' ? '' : `height: ${imageheight}px;`

        //this.newStyleStr = `${styleStr}; ${imageHeightStyle}; width: ${imageWidth}px; padding: 0 ${+padding}px;`// 删除padding
        this.newStyleStr = `${styleStr}; ${imageHeightStyle}; width: ${imageWidth}px;`;
      },
      // 计算视觉优先的图片宽高
      wxAutoImageCal(originalWidth, originalHeight) {

        const systemInfo = wx.getSystemInfoSync()
        // 获取图片的原始长宽
        const windowWidth = systemInfo.windowWidth
        const results = {}

        if (originalWidth < 60 || originalHeight < 60) {
          // const { src } = this.node.attr
          // let parent = this.$parent
          // while (!parent.preview || typeof parent.preview !== 'function') {
          //   parent = parent.$parent
          // }
          // parent.removeImageUrl(src)
          this.preview = false
        }

        // 判断按照那种方式进行缩放
        if (originalWidth > windowWidth) {
          // 在图片width大于手机屏幕width时候
          results.imageWidth = windowWidth
          results.imageheight = windowWidth * (originalHeight / originalWidth)
        } else {
          // 否则展示原来的数据
          results.imageWidth = originalWidth
          results.imageheight = originalHeight
        }
        return results
      }
    }
  })
</script>
<style scoped lang="scss">

.wx-parse-img{
  will-change: transform;
  width: 100%;
  max-width: 750rpx;
  vertical-align: top;
}
</style>
