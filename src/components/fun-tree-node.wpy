<style lang="scss">
/*@import "../assets/app.scss";*/
.check-icon{
  width: 20px;
  height: 20px;
}
</style>
<template>
  <div :style="{paddingLeft:val.pid === 0 ? 0:indent+'px'}" class="m-t-15 p-r-10">
    <div class="flex" @tap.stop="clickFn(val)">
      <div v-show="(!checkOnlyLeaf || isLeaf)">
<!--        <icon :type="isCheck?'iconcheckbox-check':'iconcheckbox'" :color="isCheck?'#F53636':'#ccc'"></icon>-->
        <image class="check-icon" :src="isCheck?'/static/tree/fun-tree-check.png':'/static/tree/fun-tree.png'"></image>
      </div>
      <div class="flex1 p-l-10 fz-14 c6">{{ labelText }}</div>
    </div>
    <div v-if="children.length>0"  :style="{paddingLeft:indent+'px'}">
      <div v-for="(item, index) in children" :key="index" class="m-t-10">
        <fun-tree-node-child
          :ref="'item-item'+index"
          @clear="bingClearFn"
          :single="single"
          :has="has"
          :indent="indent"
          :eid="eid"
          :nodeKey="nodeKey"
          :check-only-leaf="checkOnlyLeaf"
          :conf="conf"
          :val="item"></fun-tree-node-child>
      </div>
    </div>
  </div>
</template>

<script>
  import wepy from '@wepy/core'
  import { TreeHub } from './TreeHub'
  import { ls } from '../common/helper'
  import store from '../store'
  wepy.component({
    props: {
      checkOnlyLeaf: {
        type: Boolean,
        default: false
      },
      nodeKey: {
        type: String,
        require: true
      },
      // 单选
      single: {
        type: Boolean,
        default: false
      },
      _clear: {
        type: Boolean,
        default: false
      },
      pidKey: {
        type: String,
        required: true
      },
      eid: {
        type: String,
        require: true
      },
      val: {
        type: [Object],
        default: {},
        required: true
      },
      has: {
        type: Array
      },
      indent: {
        type: Number,
        require: true
      },
      conf: {
        type: Object,
        require: true
      }
    },
    data: {
      isCheck: false,
      treeData: [],
      expanded: true
    },
    computed: {
      // treeData() {
      //   // return store.state.treeData
      //   return ls.get(this.eid)
      // },
      // 叶子目录
      isLeaf() {
        try {
          // 限制只有一级目录的情况
          return this.val[this.conf.pidKey] && (!this.children || this.children.length < 1)
        } catch (e) {
          return false
        }
      },
      // 计算文本，利用conf中的label做键名
      labelText() {
        try {
          return this.val[this.conf.label]
        } catch (e) {
          return ''
        }
      },
      children() {
        try {
          return this.val[this.conf.children]
        } catch (e) {
          return []
        }
      }
    },
    watch: {

      has: {
        immediate: true,
        deep: true,
        handler(newVal) {
          // console.log('has变动', newVal)
          try {
            let isHas = newVal.includes(this.val[this.nodeKey]) || newVal.includes('' + this.val[this.nodeKey])
            this.isCheck = !!isHas
          } catch (e) {

          }
        }
      }
    },
    methods: {
      restCheck({item, nodeKey}) {
        this.isCheck = item[nodeKey] === this.val[nodeKey]
        for (let i in this.$refs) {
          this.$refs[i].restCheck({item, nodeKey})
        }
      },
      bingClearFn({item, nodeKey}) {
        this.$emit('clear', {item, nodeKey})
      },
      clickFn(item) {
        if (!this.checkOnlyLeaf || this.isLeaf) {
          if (!item.hasOwnProperty(this.nodeKey)) {
            throw new Error('nodeKey参数有误')
          }
          // console.log(this.isCheck)
          this.isCheck = !this.isCheck
          if (this.isCheck) {
            // 单选的话，需要先清空其他的
            if (this.single) {
              this.$emit('clear', {item, nodeKey: this.nodeKey})
              TreeHub.removeAllCheck(this.eid, this.nodeKey)
            }
            TreeHub.addCheck(this.eid, item, this.nodeKey)
          } else {
            TreeHub.removeCheck(this.eid, item, this.nodeKey)
          }
        }
      }
    },
    ready() {
      // this.treeData = ls.get(this.eid)
      this.treeData = store.state.treeData
    }

  })

</script>
<config>
  {
    "usingComponents": {
      "icon": "~@/components/icon",
      "fun-tree-node-child": "~@/components/fun-tree-node"
    }
  }
</config>
