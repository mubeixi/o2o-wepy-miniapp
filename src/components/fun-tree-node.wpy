<style lang="scss">
@import "../assets/app.scss";
</style>
<template>
  <div :style="{paddingLeft:val.pid === 0 ? 0:indent+'px'}" class="m-t-15 p-r-10">
    <div class="flex" @tap.stop="clickFn(val)">
      <div v-show="(!checkOnlyLeaf || isLeaf)">
<!--        <checkbox v-if="!single" size="mini" :checked="isCheck" color="#F53636" />-->
<!--        <radio v-if="single" size="mini" :checked="isCheck" color="#F53636" />-->
        <icon :type="isCheck?'iconcheckbox-check':'iconcheckbox'" :color="isCheck?'#F53636':'#ccc'"></icon>
      </div>
      <div class="flex1 p-l-10 fz-14 c6">{{ labelText }}</div>
    </div>
    <div v-if="children.length>0"  :style="{paddingLeft:indent+'px'}">
      <div v-for="(item, index) in children" :key="index" class="m-t-10">
        <fun-tree-node :ref="'item-item'+index" @clear="bingClearFn" :single="single" :has="has" :indent="indent" :eid="eid" :nodeKey="nodeKey" :conf="conf" :val="item"></fun-tree-node>
      </div>
    </div>
  </div>
</template>

<script>
  import wepy from '@wepy/core'
  import { TreeHub } from './TreeHub'
  import { ls } from '../common/helper'

  wepy.component({
    props: {
      checkOnlyLeaf: {
        type: Boolean,
        default: false
      },
      nodeKey: {
        type: String,
        require: true
      },
      // 单选
      single: {
        type: Boolean,
        default: false
      },
      _clear: {
        type: Boolean,
        default: false
      },
      eid: {
        type: String,
        require: true
      },
      val: {
        type: [Object],
        default: {},
        required: true
      },
      has: {
        type: Array
      },
      indent: {
        type: Number,
        require: true
      },
      conf: {
        type: Object,
        require: true
      }
    },
    data: {
      isCheck: false,
      expanded: true
    },
    computed: {
      treeData() {
        return ls.get(this.eid)
      },
      // 叶子目录
      isLeaf() {
        try {
          return !this.children || this.children.length < 1
        } catch (e) {
          return false
        }
      },
      // 计算文本，利用conf中的label做键名
      labelText() {
        try {
          return this.val[this.conf.label]
        } catch (e) {
          return ''
        }
      },
      children() {
        try {
          return this.val[this.conf.children]
        } catch (e) {
          return []
        }
      }
    },
    watch: {
      // treeData: {
      //   immediate: true,
      //   deep: true,
      //   handler(newVal) {
      //     console.log('treeData变化')
      //     let nodes = newVal
      //     for (let idx in nodes) {
      //       if (nodes[idx][this.nodeKey] === this.val[this.nodeKey]) {
      //         this.isCheck = !!nodes[idx][this.nodeKey].check
      //       }
      //     }
      //   }
      // },
      val(newVal) {
        // console.log(newVal)
      },
      has: {
        immediate: true,
        deep: true,
        handler(newVal) {
          try {
            let isHas = newVal.includes(this.val[this.nodeKey]) || newVal.includes('' + this.val[this.nodeKey])
            if (isHas) {
              this.isCheck = true
            }
          } catch (e) {

          }
        }
      }
    },
    methods: {
      restCheck({item, nodeKey}) {
        this.isCheck = item[nodeKey] === this.val[nodeKey]
        for (let i in this.$refs) {
          this.$refs[i].restCheck({item, nodeKey})
        }
      },
      bingClearFn({item, nodeKey}) {
        this.$emit('clear', {item, nodeKey})
      },
      clickFn(item) {
        // console.log(item)
        if (!this.checkOnlyLeaf || this.isLeaf) {
          if (!item.hasOwnProperty(this.nodeKey)) {
            throw new Error('nodeKey参数有误')
          }
          // console.log(this.isCheck)
          this.isCheck = !this.isCheck
          if (this.isCheck) {
            // 单选的话，需要先清空其他的
            if (this.single) {
              // console.log(333333)
              this.$emit('clear', {item, nodeKey: this.nodeKey})
              TreeHub.removeAllCheck(this.eid, this.nodeKey)
            }
            TreeHub.addCheck(this.eid, item, this.nodeKey)
          } else {
            TreeHub.removeCheck(this.eid, item, this.nodeKey)
          }
        }
      }
    },

    created() {

    }

  })

</script>
<config>
  {
    "usingComponents": {
      "icon": "~@/components/icon",
      "fun-tree-node": "~@/components/fun-tree-node"
    }
  }
</config>
