<style lang="scss">

  .check-icon {
    width: 20px;
    height: 20px;
  }
</style>
<template>
  <div :style="{paddingLeft:val.pid === 0 ? 0:indent+'px'}" class="m-t-15 p-r-10">
    <div class="flex" @tap.stop="clickFn(val)">
      <div v-show="(!checkOnlyLeaf || isLeaf)">
        <!--        <icon :type="isCheck?'iconcheckbox-check':'iconcheckbox'" :color="isCheck?'#F53636':'#ccc'"></icon>-->
        <image class="check-icon" :src="isCheck?'/static/tree/fun-tree-check.png':'/static/tree/fun-tree.png'"></image>
      </div>
      <div class="flex1 p-l-10 fz-14 c6">{{ labelText }}</div>
    </div>
    <div v-if="children.length>0" :style="{paddingLeft:indent+'px'}">
      <div v-for="(item, index) in children" :key="index" class="m-t-10">
        <fun-tree-node-child
          :ref="'item-item'+index"
          :single="single"
          :has="has"
          :autoSelectParent="autoSelectParent"
          :indent="indent"
          :eid="eid"
          :nodeKey="nodeKey"
          :check-only-leaf="checkOnlyLeaf"
          :conf="conf"
          :val="item"></fun-tree-node-child>
      </div>
    </div>
  </div>
</template>

<script>
  import wepy from '@wepy/core'
  import { TreeHub } from './TreeHub'
  import store from '../store'
  import { componentMixins } from '@/mixins'
  import emitter from '@/mixins/emitter'

  wepy.component({
    name: 'funTreeNode',
    options: {
      addGlobalClass: true
    },
    mixins: [componentMixins, emitter],
    props: {
      checkOnlyLeaf: {
        type: Boolean,
        default: false
      },
      autoSelectParent:{
        type: Boolean,
        default: false
      },

      nodeKey: {
        type: String,
        require: true
      },
      // 单选
      single: {
        type: Boolean,
        default: false
      },
      _clear: {
        type: Boolean,
        default: false
      },
      pidKey: {
        type: String,
        required: true
      },
      eid: {
        type: String,
        require: true
      },
      val: {
        type: [Object],
        default: {},
        required: true
      },
      has: {
        type: Array
      },
      indent: {
        type: Number,
        require: true
      },
      conf: {
        type: Object,
        require: true
      }
    },
    data: {
      isCheck: false,
      // treeData: [],
      expanded: true
    },
    computed: {
      // treeData() {
      //   // return store.state.treeData
      //   return ls.get(this.eid)
      // },
      // 叶子目录
      isLeaf() {
        try {
          // 限制只有一级目录的情况
          return this.val[this.conf.pidKey] && (!this.children || this.children.length < 1)
        } catch (e) {
          return false
        }
      },
      // 计算文本，利用conf中的label做键名
      labelText() {
        try {
          return this.val[this.conf.label]
        } catch (e) {
          return ''
        }
      },
      children() {
        try {
          return this.val[this.conf.children]
        } catch (e) {
          return []
        }
      }
    },
    watch: {

      has: {
        immediate: true,
        deep: true,
        handler(newVal) {
          // console.log('has变动', newVal)
          try {
            let isHas = newVal.includes(this.val[this.nodeKey]) || newVal.includes('' + this.val[this.nodeKey])
            this.isCheck = !!isHas
          } catch (e) {

          }
        }
      }
    },
    methods: {
      // 刷新选择状态
      flashFn() {
        const checkList = TreeHub.getCHeckList(this.eid)
        let isHas = false
        for (var row of checkList) {
          if (String(row[this.nodeKey]) === String(this.val[this.nodeKey])) {
            isHas = true
            break
          }
        }
        this.isCheck = isHas
        for (let i in this.$refs) {
          this.$refs[i].flashFn()
        }
      },
      restCheck({ item, nodeKey }) {
        this.isCheck = item[nodeKey] === this.val[nodeKey]
        for (let i in this.$refs) {
          this.$refs[i].restCheck({ item, nodeKey })
        }
      },
      updateTreeDown(node, changes = {}) {
        if (this.checkOnlyLeaf) return
        // 如果可以设置的话，那么批量设置下级子节点对应属性
        TreeHub.updateTreeDown({eid: this.eid, item: node, nodeKey: this.nodeKey, changes})
        this.dispatch('funTree', 'on-flash')
      },
      updateTreeUp(node, changes = {}) {
        TreeHub.updateTreeUp({eid: this.eid, item: node, nodeKey: this.nodeKey, changes,autoSelectParent:this.autoSelectParent})
        this.dispatch('funTree', 'on-flash')
      },
      clickFn(item) {
        if (!this.checkOnlyLeaf || this.isLeaf) {
          if (!item.hasOwnProperty(this.nodeKey)) {
            throw new Error('nodeKey参数有误')
          }

          // 单选的话，需要先清空其他的
          if (this.single && !this.isCheck) {
            this.isCheck = true
            this.dispatch('funTree', 'on-clear', { item, nodeKey: this.nodeKey })
            // this.$emit('clear', { item, nodeKey: this.nodeKey })
            TreeHub.removeAllCheck(this.eid, this.nodeKey)
            TreeHub.addCheck(this.eid, item, this.nodeKey)
            return
          }

          var changes = {}
          this.isCheck = !this.isCheck
          changes.check = this.isCheck
          if (changes.check) {
            TreeHub.addCheck(this.eid, item, this.nodeKey)
          } else {
            TreeHub.removeCheck(this.eid, item, this.nodeKey)
          }

          this.updateTreeDown(item, changes)
          this.updateTreeUp(item, changes)
        }
      }
    },
    ready() {
      // this.treeData = ls.get(this.eid)
      // this.treeData = store.state.treeData
    }

  })

</script>
<config>
  {
  "usingComponents": {
  "icon": "~@/components/icon",
  "fun-tree-node-child": "~@/components/fun-tree-node"
  }
  }
</config>
