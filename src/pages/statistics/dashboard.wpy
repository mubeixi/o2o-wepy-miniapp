<style lang="scss">

  @import "../../assets/variables.scss";
  .page-wrap{

  }
  .customer{
    .main{
      padding-top: 30rpx !important;
      padding-bottom: 20rpx !important;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    .pie-echarts{
      display: block;
      width: 500rpx;
      height: 340rpx;
    }
    &-info{
      color: #666;
    }
    &-row{
      font-size: 12px;
      line-height: 24px;
    }
  }
  .section{
    width: 710rpx;
    margin: 30rpx auto 0;
    background: white;
    border-radius: 10rpx;
    overflow: hidden;
    padding: 20rpx 0;
    box-sizing: border-box;
    .title{
      padding: 0 20rpx;
      .before{
        width: 6rpx;
        height: 32rpx;
        background: $fun-blue-color;
      }
      .text{
        font-weight: bold;
        color: #333333;
      }
    }
    .main{
      padding: 0 20rpx;
    }
    .foot{
      border-top: 1px solid #eee;
      font-size: 12px;
      display: flex;
      justify-content: space-between;
      align-items: center;

      color: #666;
      padding: 20rpx 20rpx 0;
    }
  }

  .tab{

    &-list{
      margin: 30rpx 0;
      display: flex;
    }
    &-item{
      position: relative;
      color: #333333;
      font-size: 12px;
      flex: 1;
      text-align: center;
      background: #F0FAFF;
      padding: 30rpx 0;
      &.active{
        background: rgba(255,255,255,.2);
        color: $fun-blue-color;
      }
      .underline{
        position: absolute;
        width: 100%;
        top: 2px;
        height: 2px;
        background: $fun-blue-color;
      }
      .label{
        margin-bottom: 24rpx;
      }
    }
  }

  .swiper-echarts{
    display: block;
    width: 670rpx;
    height: 400rpx;
  }

  .product-list{
    margin-top: 20px;
    .th,.td{
      width: 136rpx;
      overflow: hidden;
    }
    .Products_Name{
      width: 116rpx;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
  }




</style>
<template>
  <div class="page-wrap p-b-30">

    <div class="section">
      <div class="title"><span class="before"></span><span class="text">实时数据</span></div>
      <div class="main">
        <div class="tab-list">
          <div class="tab-item" :class="{active:tabActiveIdx===5}" @click="tabIdx(5)">
            <div v-if="tabActiveIdx===5" class="underline"></div>
            <div class="label">{{tabData.view_person_count.name}}</div><div class="val">{{tabData.view_person_count.value}}</div>
          </div>
          <div class="tab-item" :class="{active:tabActiveIdx===4}" @click="tabIdx(4)">
            <div v-if="tabActiveIdx===4" class="underline"></div>
            <div class="label">{{tabData.order_count.name}}</div><div class="val">{{tabData.order_count.value}}</div>
          </div>
          <div class="tab-item" :class="{active:tabActiveIdx===2}" @click="tabIdx(2)">
            <div v-if="tabActiveIdx===2" class="underline"></div>
            <div class="label">{{tabData.order_pay_count.name}}</div><div class="val">{{tabData.order_pay_count.value}}</div>
          </div>
          <div class="tab-item" :class="{active:tabActiveIdx===1}" @click="tabIdx(1)">
            <div v-if="tabActiveIdx===1" class="underline">
            </div><div class="label">{{tabData.order_pay_money.name}}</div><div class="val">{{tabData.order_pay_money.value}}</div>
          </div>
          <div class="tab-item" :class="{active:tabActiveIdx===2}" @click="tabIdx(2)">
            <div v-if="tabActiveIdx===2" class="underline"></div>
            <div class="label">{{tabData.order_pay_person_count.name}}</div><div class="val">{{tabData.order_pay_person_count.value}}</div>
          </div>
        </div>


        <echarts ref="catTime" :propData="charts[tabActiveIdx].data" :conf="charts[tabActiveIdx].conf" :lazyLoad="chartReady" class="swiper-echarts" :onInit="onInitChart1" ></echarts>
<!--        <div class="foot">-->
<!--          <span>查看详情</span>-->
<!--          <icon type="iconarrowleft" size="14" color="#999"></icon>-->
<!--        </div>-->


      </div>
    </div>

    <div class="section customer">
      <div class="title"><span class="before"></span><span class="text">客户分析</span></div>
      <div class="main">
        <div class="customer-info">
          <div class="customer-row">{{tabData.view_person_count.name}}：{{tabData.view_person_count.value}} </div>
          <div class="customer-row">{{tabData.order_person_count.name}}：{{tabData.order_person_count.value}}</div>
          <div class="customer-row">{{tabData.order_pay_person_count.name}}：{{tabData.order_pay_person_count.value}}</div>
          <div class="customer-row">{{tabData.order_avg_money.name}}：￥{{tabData.order_avg_money.value}}</div>
        </div>
        <echarts ref="pie" :propData="newOldTradeStatistic.circles" :conf="newOldTradeStatistic.circlesConf"  class="pie-echarts" :onInit="onInitChartPie" ></echarts>
      </div>
<!--      <div class="foot">-->
<!--        <span>查看详情</span>-->
<!--        <icon type="iconarrowleft" size="14" color="#999"></icon>-->
<!--      </div>-->
    </div>

    <div class="section">
      <div class="title"><span class="before"></span><span class="text">商品分析</span></div>
      <div class="main" style="padding: 40rpx 0;">
        <div class="val-list flex">
          <div class="val-item flex1 text-center">
            <div class="title c9 m-b-15 fz-12">商品访客(人)</div>
            <div class="val c3">{{systemProdSalesData.total_vistiors}}</div>
          </div>
          <div class="val-item flex1 text-center">
            <div class="title c9 m-b-15 fz-12">商品销量(件)</div>
            <div class="val c3">{{systemProdSalesData.total_sales_count}}</div>
          </div>
          <div class="val-item flex1 text-center">
            <div class="title c9 m-b-15 fz-12">转化率</div>
            <div class="val c3">{{systemProdSalesData.conversion_rate}}%</div>
          </div>
        </div>
        <div class="product-list table fz-14">
          <div class="tr">
            <div class="th">产品</div>
            <div class="th">浏览(人)</div>
            <div class="th">付款(人)</div>
            <div class="th">销量(件)</div>
            <div class="th">转化率</div>
          </div>
          <div class="tr" v-for="(product,idx) in systemProdSalesData.list" :key="idx">
            <div class="td">
<!--              <div style="margin: 0 auto" :style="{backgroundImage:'url('+product.ImgPath+')'}" class="w30 h20 img-cover"></div>-->
              <div class="fz-12 Products_Name">{{product.Products_Name}}</div>
            </div>
            <div class="td">{{product.view_user_count}}</div>
            <div class="td">{{product.pay_user_count}}</div>
            <div class="td">{{product.sales_count}}</div>
            <div class="td">{{product.conversion_rate}}</div>
          </div>
        </div>
      </div>
<!--      <div class="foot">-->
<!--        <span>查看详情</span>-->
<!--        <icon type="iconarrowleft" size="14" color="#999"></icon>-->
<!--      </div>-->
    </div>

    <div class="section">
      <div class="title"><span class="before"></span><span class="text">交易分析</span></div>
      <div class="main" style="padding: 20px 0;">
        <div class="val-list flex">
          <div class="val-item flex1 text-center">
            <div class="title c9 m-b-15 fz-12">{{tabData.order_count.name}}</div>
            <div class="val c3">{{tabData.order_count.value}}</div>
          </div>
          <div class="val-item flex1 text-center">
            <div class="title c9 m-b-15 fz-12">{{tabData.order_money.name}}</div>
            <div class="val c3">{{tabData.order_money.value}}</div>
          </div>
          <div class="val-item flex1 text-center">
            <div class="title c9 m-b-15 fz-12">{{tabData.order_rate.name}}</div>
            <div class="val c3">{{tabData.order_rate.value}}%</div>
          </div>
        </div>
      </div>
<!--      <div class="foot">-->
<!--        <span>查看详情</span>-->
<!--        <icon type="iconarrowleft" size="14" color="#999"></icon>-->
<!--      </div>-->
    </div>

  </div>
</template>
<script>
  import wepy from '@wepy/core'
  import store from '../../store'
  import pageMixin from '../../mixins'
  import { hideLoading, modal, showLoading } from '../../common/fun'
  import { getNewOldTradeStatistic, getTradeStatistic, systemProdSales } from '../../api/store'
  import { createF2Chart } from '../../mixins/f2'

  const moment = require('moment')

  /**
   * 求某个对象组成数组中，某个对象的值占百分比。方便配合f2-chart做饼图
   * @param item
   * @param arr
   * @param key
   * @returns {*}
   */
  function getPercent(item, arr, key = 'value') {
    let arrSum = 0
    for (let row of arr) {
      arrSum += row[key]
    }
    // 如果都是0的话，大家就一起穷。
    return arrSum === 0 ? (parseInt(1 / arr.length * 100) / 100) : (parseInt(item[key] / arrSum * 100) / 100)
  }

  wepy.page({
    store,
    mixins: [pageMixin],
    data: {
      newOldTradeStatistic: {},
      systemProdSalesData: {list: []},
      tabData: {},
      titles: [],
      time_list: [],
      charts: [],
      max_num: 0,
      max_rate: 0,
      tradeStatistic: {},
      tabActiveIdx: 5, // 浏览人数
      onInitChartPie(el, config, data) {
        if (!el) return

        const {width, height} = config
        let chart = createF2Chart({
          el,
          width,
          height
        })

        console.log(config)
        const map = config.map
        const _data = data

        chart.source(_data, {
          percent: {
            formatter: function formatter(val) {
              return val * 100 + '%'
            }
          }
        })
        chart.legend({
          position: 'right',
          itemFormatter: function itemFormatter(val) {
            console.log(val + '  ' + map[val])
            return val + '  ' + map[val]
          }
        })
        chart.tooltip(true)
        chart.coord('polar', {
          transposed: true,
          radius: 0.85
        })
        chart.axis(false)
        chart.interval()
          .position('a*percent')
          .color('name', [ '#1890FF', '#13C2C2', '#2FC25B', '#FACC14', '#F04864', '#8543E0' ])
          .adjust('stack')
          .style({
            lineWidth: 1,
            stroke: '#fff',
            lineJoin: 'round',
            lineCap: 'round'
          })
          .animate({
            appear: {
              duration: 1200,
              easing: 'bounceOut'
            }
          })

        chart.render()

        // 注意：需要把chart return 出来
        return chart
      },
      onInitChart1(el, config, data) {
        if (!el) return

        const {width, height} = config
        let chart = createF2Chart({
          el,
          width,
          height
        })

        const _data = data

        chart.source(_data, {
          date: {
            range: [0, 1],
            type: 'timeCat',
            mask: 'HH'
          },
          value: {
            min: config.min,
            max: config.max
            // tickCount: 4
          }
        })

        chart.area().position('date*value').color('label').adjust('stack')
        chart.line().position('date*value').color('label').adjust('stack')
        chart.render()

        // 注意：需要把chart return 出来
        return chart
      }
    },
    computed() {

    },
    methods: {
      tabIdx(idx) {
        this.tabActiveIdx = idx
        setTimeout(() => {
          this.$refs.catTime.init()
        })
      },
      async _init_func() {
        try {
          showLoading('初始化信息')

          // 线图
          const {data: tradeStatistic} = await getTradeStatistic().catch(() => { throw new Error('获取统计失败') })
          const {data: tabData = {}, titles = [], time_list = [], charts = [], max_num = 0, max_rate = 0} = tradeStatistic
          this.tabData = tabData
          this.titles = titles
          this.time_list = time_list.map(item => {
            return moment(`${item}:00:00`).format('YYYY-MM-DD HH:mm:ss')
            // return item.split(' ')[1]
          })

          for (let item of charts) {
            item.conf = {
              max: Math.max.apply(null, item.data),
              min: Math.min.apply(null, item.data)
            }
            for (let i in item.data) {
              item.data[i] = {
                value: item.data[i], // + parseInt(Math.random() * 100) + 1,
                label: item.name,
                date: this.time_list[i]}
            }
          }
          this.charts = charts
          this.max_num = max_num
          this.max_rate = max_rate
          this.$refs.catTime.init()

          // 饼图
          let {data: newOldTradeStatistic} = await getNewOldTradeStatistic().catch(() => { throw new Error('获取统计失败') })
          // for (let item of newOldTradeStatistic.circles) {
          //   item.value = Math.random() * 100
          // }
          const circles = newOldTradeStatistic.circles.map(item => {
            // 绘制饼图时，数据集中的每一条记录中必须包含一个常量字段（并且必须是字符串类型）
            return {...item, a: '1', percent: getPercent(item, newOldTradeStatistic.circles)}
          })
          newOldTradeStatistic.circles = circles
          let map = {}
          for (let key in circles) {
            map[circles[key].name] = parseInt(circles[key].percent * 100 * 100) / 100 + '%'
          }
          newOldTradeStatistic.circlesConf = {map: map} // 配置
          this.newOldTradeStatistic = newOldTradeStatistic
          this.$refs.pie.init()

          // 底部
          const proPostData = {time: 'desc', start_time: moment().format('YYYY-MM-DD')}
          const {data: systemProdSalesData} = await systemProdSales(proPostData).catch(() => { throw new Error('获取商品销售数据失败') })
          this.systemProdSalesData = systemProdSalesData

          hideLoading()
        } catch (e) {
          modal(e.message)
        }
      }
    },
    onShow() {
      this._init_func()
    },
    onReady() {

    },
    onLoad(options) {
      if (options.tabActiveIdx >= 0) {
        this.tabActiveIdx = Number(options.tabActiveIdx)
      }
    }
  })
</script>
<config>
  {
    "navigationBarTitleText": "数据统计",
    "navigationBarTextStyle": "black",
    "usingComponents": {
      "echarts": "~@/components/echarts",
      "icon": "~@/components/icon",
      "popup-layer": "~@/components/popup-layer"
    }
  }
</config>
