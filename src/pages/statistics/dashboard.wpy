<style lang="scss">
  @import "../../assets/app.scss";
  @import "../../assets/variables.scss";
  .page-wrap{

  }
  .customer{
    .main{
      padding-top: 30rpx !important;
      padding-bottom: 20rpx !important;
    }
    &-info{
      color: #666;
    }
    &-row{
      font-size: 12px;
      line-height: 24px;
    }
  }
  .section{
    width: 710rpx;
    margin: 30rpx auto 0;
    background: white;
    border-radius: 10rpx;
    overflow: hidden;
    padding: 20rpx 0;
    box-sizing: border-box;
    .title{
      padding: 0 20rpx;
      .before{
        width: 6rpx;
        height: 32rpx;
        background: $fun-blue-color;
      }
      .text{
        font-weight: bold;
        color: #333333;
      }
    }
    .main{
      padding: 0 20rpx;
    }
    .foot{
      border-top: 1px solid #DADADA;
      font-size: 12px;
      display: flex;
      justify-content: space-between;
      align-items: center;

      color: #666;
      padding: 20rpx 20rpx 0;
    }
  }
  .tab{

    &-list{
      margin: 30rpx 0;
      display: flex;
    }
    &-item{
      position: relative;
      color: #333333;
      font-size: 12px;
      flex: 1;
      text-align: center;
      background: #F0FAFF;
      padding: 30rpx 0;
      &.active{
        background: rgba(255,255,255,.2);
        color: $fun-blue-color;
      }
      .underline{
        position: absolute;
        width: 100%;
        top: 2px;
        height: 2px;
        background: $fun-blue-color;
      }
      .label{
        margin-bottom: 24rpx;
      }
    }
  }
  .swiper-echarts{
    display: block;
    width: 670rpx;
    height: 400rpx;
  }
</style>
<template>
  <div class="page-wrap">

    <div class="section">
      <div class="title"><span class="before"></span><span class="text">实时数据</span></div>
      <div class="main">
        <div class="tab-list">
          <div class="tab-item" :class="{active:tabActiveIdx===0}" @click="tabIdx(0)">
            <div v-if="tabActiveIdx===0" class="underline"></div>
            <div class="label">{{tabData.view_person_count.name}}</div><div class="val">{{tabData.view_person_count.value}}</div>
          </div>
          <div class="tab-item" :class="{active:tabActiveIdx===1}" @click="tabIdx(1)">
            <div v-if="tabActiveIdx===1" class="underline"></div>
            <div class="label">{{tabData.order_count.name}}</div><div class="val">{{tabData.order_count.value}}</div>
          </div>
          <div class="tab-item" :class="{active:tabActiveIdx===2}" @click="tabIdx(2)">
            <div v-if="tabActiveIdx===2" class="underline"></div>
            <div class="label">{{tabData.order_pay_count.name}}</div><div class="val">{{tabData.order_pay_count.value}}</div>
          </div>
          <div class="tab-item" :class="{active:tabActiveIdx===3}" @click="tabIdx(3)">
            <div v-if="tabActiveIdx===3" class="underline">
            </div><div class="label">{{tabData.order_pay_money.name}}</div><div class="val">{{tabData.order_pay_money.value}}</div>
          </div>
          <div class="tab-item" :class="{active:tabActiveIdx===4}" @click="tabIdx(4)">
            <div v-if="tabActiveIdx===4" class="underline"></div>
            <div class="label">{{tabData.order_pay_person_count.name}}</div><div class="val">{{tabData.order_pay_person_count.value}}</div>
          </div>
        </div>


        <echarts :propData="charts[tabActiveIdx].data" :conf="charts[tabActiveIdx].conf" :lazyLoad="chartReady" class="swiper-echarts" :onInit="onInitChart1" ></echarts>
        <div class="foot">
          <span>查看详情</span>
          <icon type="iconarrowleft" size="14" color="#999"></icon>
        </div>


      </div>
    </div>

    <div class="section customer">
      <div class="title"><span class="before"></span><span class="text">客户分析</span></div>
      <div class="main">
        <div class="customer-info">
          <div class="customer-row">{{tabData.view_person_count.name}}：{{tabData.view_person_count.value}} </div>
          <div class="customer-row">{{tabData.order_person_count.name}}：{{tabData.order_person_count.value}}</div>
          <div class="customer-row">{{tabData.order_pay_person_count.name}}：{{tabData.order_pay_person_count.value}}</div>
          <div class="customer-row">{{tabData.order_avg_money.name}}：￥{{tabData.order_avg_money.value}}</div>
        </div>
        <div class="customer-chart">
          <echarts :propData="newOldTradeStatistic.circles" :lazyLoad="pieChartReady" class="pie-echarts" :onInit="onInitChartPie" ></echarts>
        </div>
      </div>
      <div class="foot">
        <span>查看详情</span>
        <icon type="iconarrowleft" size="14" color="#999"></icon>
      </div>
    </div>

    <div class="section">
      <div class="title"><span class="before"></span><span class="text">商品分析</span></div>
      <div class="main">
      </div>
    </div>

    <div class="section">
      <div class="title"><span class="before"></span><span class="text">交易分析</span></div>
      <div class="main">
      </div>
    </div>

  </div>
</template>
<script>
  import wepy from '@wepy/core'
  import store from '../../store'
  import pageMixin from '../../mixins'
  import {
    chooseImageByPromise, getArrColumn, uploadImages
  } from '../../common/helper'
  import { error } from '../../common/fun'
  import {
    getTradeStatistic, getNewOldTradeStatistic
  } from '../../api/store'
  const moment = require('moment')

  /**
   * 求某个对象组成数组中，某个对象的值占百分比。方便配合f2-chart做饼图
   * @param item
   * @param arr
   * @param key
   * @returns {*}
   */
  function getPercent(item, arr, key = 'value') {
    console.log(item, arr, key)
    let arrSum = 0
    for(let row of arr){
      arrSum += row[key]
    }
    return arrSum === 0 ? 0 : (parseInt(item / arrSum * 100) / 100 + '%')
  }

  wepy.page({
    store,
    mixins: [pageMixin],
    data: {
      pieChartReady: false,
      chartReady: false,
      newOldTradeStatistic: {},
      tabData: {},
      titles: [],
      time_list: [],
      charts: [],
      max_num: 0,
      max_rate: 0,
      tradeStatistic: {},
      tabActiveIdx: 0,
      onInitChartPie(F2, config, data) {
        if (!F2) return
        const chart = new F2.Chart(config)
        const _data = data

        chart.source(_data, {
          date: {
            range: [0, 1],
            type: 'timeCat',
            mask: 'HH'
          },
          value: {
            min: config.min,
            max: config.max
            // tickCount: 4
          }
        })

        chart.area().position('date*value').color('label').adjust('stack')
        chart.line().position('date*value').color('label').adjust('stack')
        chart.render()

        // 注意：需要把chart return 出来
        return chart
      },
      onInitChart1(F2, config, data) {
        if (!F2) return
        const chart = new F2.Chart(config)
        const _data = data

        chart.source(_data, {
          date: {
            range: [0, 1],
            type: 'timeCat',
            mask: 'HH'
          },
          value: {
            min: config.min,
            max: config.max
            // tickCount: 4
          }
        })

        chart.area().position('date*value').color('label').adjust('stack')
        chart.line().position('date*value').color('label').adjust('stack')
        chart.render()

        // 注意：需要把chart return 出来
        return chart
      }
    },
    computed() {

    },
    methods: {
      tabIdx(idx) {
        this.tabActiveIdx = idx
        this.chartReady = false
        setTimeout(() => {
          this.chartReady = true
        })
      },
      async _init_func() {
        try {
          const {data: tradeStatistic} = await getTradeStatistic().catch(() => { throw new Error('获取统计失败') })
          const {data: tabData = {}, titles = [], time_list = [], charts = [], max_num = 0, max_rate = 0} = tradeStatistic
          this.tabData = tabData
          this.titles = titles
          this.time_list = time_list.map(item => {
            return moment(`${item}:00:00`).format('YYYY-MM-DD HH:mm:ss')
            // return item.split(' ')[1]
          })

          for (let item of charts) {
            item.conf = {
              max: Math.max.apply(null, item.data),
              min: Math.min.apply(null, item.data)
            }
            for (let i in item.data) {
              item.data[i] = {value: item.data[i] + parseInt(Math.random() * 100) + 1, label: item.name, date: this.time_list[i]}
            }
          }
          this.charts = charts
          this.max_num = max_num
          this.max_rate = max_rate
          this.chartReady = true

          const {data: newOldTradeStatistic} = await getNewOldTradeStatistic().catch(() => { throw new Error('获取统计失败') })
          const circles = newOldTradeStatistic.circles.map(item => {
            // 绘制饼图时，数据集中的每一条记录中必须包含一个常量字段（并且必须是字符串类型）
            return {...item, a: '1', percent: getPercent(item, newOldTradeStatistic.circles)}
          })

          this.newOldTradeStatistic = newOldTradeStatistic
          this.newOldTradeStatistic.circles = circles

          this.pieChartReady = true
        } catch (e) {

        }
      }
    },
    onShow() {
      this._init_func()
    },
    onReady() {

    },
    onLoad() {

    }
  })
</script>
<config>
  {
    "navigationBarTitleText": "数据统计",
    "navigationBarTextStyle": "black",
    "usingComponents": {
      "echarts": "~@/components/echarts",
      "icon": "~@/components/icon",
      "popup-layer": "~@/components/popup-layer"
    }
  }
</config>
