<template>
  <div class="seckill-add page-wrap">
    <wzw-im-tip ref="wzwImTip"></wzw-im-tip>
    <err-msg :errs="formCheckResult"></err-msg>
      <block v-if="selectProductList.length>0">
        <div @click="openPop('product')">
          <div  class="flex  product-mbx"  v-for="(product,idx) in selectProductList" :key="idx">
            <div class="thumbs" :style="{backgroundImage:'url('+product.ImgPath+')'}">
            </div>
            <div class="info">
              <div class="title-my">
                {{product.Products_Name}}
              </div>
              <div class="fz-13 c6">
                原价：<span class="color-my m-r-4">¥</span> <span class="color-my fz-16">{{product.Products_PriceX}}</span>
              </div>
            </div>
          </div>
        </div>
        <div style="width: 750rpx;height: 50rpx;"></div>
        <div class="submits flex flex-vertical-center flex-justify-center" @click="openPop('product')">
          <icon type="iconadd" color="#00A8FF"  size="20"  class="m-r-9"></icon>
          编辑商品
        </div>

      </block>
      <block v-else>
        <div style="width: 750rpx;height: 50rpx;"></div>
        <div class="submits flex flex-vertical-center flex-justify-center" @click="openPop('product')">
          <icon type="iconadd" color="#00A8FF"  size="20"  class="m-r-9"></icon>
          选择商品
        </div>
      </block>




    <div class="store-item flex flex-vertical-center flex-justify-between" >
      <div class="titles">
        开始时间
      </div>
      <div class="content fz-14 c9 flex flex-vertical-center">
        <time @uptime="upStartTime" :val="start_time">
          <span class="fz-14 c3" v-if="start_time">{{start_time}}</span>
          <span class="fz-14 c9" v-else>最少三小时以后</span>
        </time>
        <icon type="iconarrowleft" size="14" color="#999" class="m-l-10"></icon>
      </div>
    </div>
    <div class="store-item flex flex-vertical-center flex-justify-between" >
      <div class="titles">
        结束时间
      </div>
      <div class="content fz-14 c9 flex flex-vertical-center">
        <time @uptime="upEndTime" :val="end_time">
          <span class="fz-14 c3" v-if="end_time">{{end_time}}</span>
          <span class="fz-14 c9" v-else>直播时长最少半小时，最长12小时</span>
        </time>
        <icon type="iconarrowleft" size="14" color="#999"  class="m-l-10"></icon>
      </div>
    </div>

    <div class="store-item flex flex-vertical-center">
      <div  class="titles">
        主播昵称
      </div>
      <div class="flex1 fz-13" >
        <input v-model="anchor_name" class="p-l-26 text-right" placeholder="直播间主播昵称"  placeholder-class="place"/>
      </div>
    </div>

    <div class="store-item flex flex-vertical-center">
      <div  class="titles">
        主播微信号
      </div>
      <div class="flex1 fz-13" >
        <input v-model="anchor_wechat" class="p-l-26 text-right" placeholder="必须是已认证过的微信号"  placeholder-class="place"/>
      </div>
    </div>
    <div class="fz-12 c9 p-10 text-right">
      <div class="tip-item">* 主播微信号只用于开播时的审核，不会展示给消费者</div>
    </div>


    <!--占住底部的位置-->
    <div class="safearea-box fixed bgwhite"></div>
    <!--放置页面底部内容被挡住，额外给的高度-->
    <div class="safearea-box"></div>
    <!--action-btn全局有样式-->
    <div class="fz-16 btn action-btn btn-primary"  @click="addLive">
      确定
    </div>


    <popup-layer title="选择商品" ref="product" :autoClose="true">
      <div class="product-list">
        <div class="product-item" v-for="(product,idx) in proData" :key="idx">
          <template v-if="product.Products_Status===1">
            <div class="info-box" @click="taggleProductCheck(idx)">
              <div class="check"   >
                <div v-show="!product.disalbed">
                  <icon
                    class="check-icon"
                    :color="product.check?'#F53636':'#999'"
                    size="20"
                    :type="product.check?'iconblchecked':'iconCircle'"
                  ></icon>
                </div>
                <div v-show="product.disalbed">
                  <icon
                    class="check-icon"
                    color="#eee"
                    size="20"
                    type="iconblchecked"
                  ></icon>
                </div>

              </div>
              <image class="thumb" :src="product.ImgPath"></image>
              <div class="info">
                <div class="title">{{product.Products_Name}}{{product.Products_ID}}</div>
                <div class="price-box">
                  <span class="sign">￥</span>
                  <span>{{product.Products_PriceY}}</span>
                  <span class="p-l-20 p-r-4 fz-12 color-gray">拼购价:</span>
                  <span class="sign">￥</span>
                  <span>{{product.Products_PriceX}}</span>
                </div>
                <div class="stock-box">
                  <span class="stock">库存:{{product.Products_Count}}</span>
                  <span class="sale p-l-40">销量:{{product.Products_Sales}}</span>
                </div>
              </div>
            </div>
          </template>
        </div>
      </div>
      <button class="btn btn-primary m-t-35" @click="surePro">确认</button>
    </popup-layer>

  </div>
</template>

<script>
  import wepy from '@wepy/core'
  import store from '../../store'
  import pageMixin from '../../mixins'
  import { confirm, findArrayIdx, getArrColumn, ls, objTranslate, validateFun } from '../../common/helper'
  import { bizProdList } from '../../api/product'
  import { applyLive, getLiveApplyStatus } from '@/api/live'
  import { back, hideLoading, linkTo, showLoading, toast } from '../../common/fun'
  import { Exception } from '@/common/Exception'

  const moment = require('moment')

  wepy.page({
    store,
    mixins: [pageMixin],
    data: {
      mbx: [],
      formCheckResult: '',
      id: '',
      price: '',
      count: '',
      limit: '',
      proData: [],
      pro_id: '',
      selectProductList: [],
      live_id: '',
      end_time: '',
      start_time: '',
      anchor_name: '',
      anchor_wechat: '',
      goods_ids: '',
      editData: {}
    },
    onUnload() {

    },
    methods: {
      addLive() {
        // if (this.selectProductList.length < 1) {
        //   this.formCheckResult = ['请选择商品']
        //   return
        // }

        let data = {
          start_time: this.start_time,
          end_time: this.end_time,
          anchor_name: this.anchor_name,
          anchor_wechat: this.anchor_wechat,
          goods_ids: this.goods_ids
        }

        const rule = {
          goods_ids: {
            required: false
          },
          start_time: {
            required: true,
            type: String,
            use: {
              // after: (val, row) => moment(val).isAfter()
            },
            message: {
              required: '开始时间必选',
              type: '开始时间必须为字符串'
              // after: '开始时间必须大于现在时间'
            }
          },
          end_time: {
            required: true,
            type: String,
            use: {
              after: (val, row) => moment(val).isAfter(row.start_time)
            },
            message: {
              required: '结束时间必选',
              type: '结束时间必须为字符串',
              after: '结束时间必须在开始时间之后'
            }
          }
        }
        const checkRt = validateFun(data, rule)
        if (checkRt !== true) {
          this.formCheckResult = checkRt
          return
        }

        if (this.live_id) {
          data.live_id = this.live_id
        }

        applyLive(data).then(res => {
          // toast('操作成功')

          confirm({showCancel: false, title: '提示', content: res.msg}).then(() => {
            linkTo('/pages/live/room')
          }).catch(() => {})

        }).catch(e => {

        })
      },
      upStartTime(val) {
        const formatRt = moment(val).format('YYYY-MM-DD HH:mm:ss')
        this.start_time = formatRt
      },
      upEndTime(val) {
        const formatRt = moment(val).format('YYYY-MM-DD HH:mm:ss')
        this.end_time = formatRt
      },
      // closePopup() {
      //   this.closePop('product')
      //   this.proData = this.proData.map(item => {
      //     return {...item, check: false}
      //   })
      //   this.pro_id = ''
      // },
      surePro() {
        this.closePop('product')
        let that = this
        const tempArr = []
        this.proData.map(item => {
          if (item.check) {
            tempArr.push(item)
          }
        })
        that.selectProductList = tempArr.concat([])
        this.goods_ids = getArrColumn(this.selectProductList, 'Products_ID').join(',')
      },
      taggleProductCheck(idx) {
        // this.proData = this.proData.map(item => {
        //   return {...item, check: false}
        // })
        console.log(idx)
        const proData = objTranslate(this.proData)
        proData[idx].check = !proData[idx].check

        this.$set(this, 'proData', proData)
      },
      openPop(name) {
        this.$refs[name].show()
      },
      closePop(name) {
        this.$refs[name].close()
      },

      async init() {
        showLoading('加载中')
        let reqData = await bizProdList({page: 1, pageSize: 999}).catch(() => {})
        const proData = reqData.data.map(item => {
          return {...item, check: false}
        })

        const vo = await getLiveApplyStatus().then(res => res.data).catch(err => Exception.handle(Error(err.msg)))
        if (vo) {
          this.end_time = vo.end_time
          this.start_time = vo.start_time
          this.anchor_name = vo.anchor_name
          this.anchor_wechat = vo.anchor_wechat
          this.goods_ids = vo.goods_ids
          this.live_id = vo.id
          if (Array.isArray(vo.live_goods) && vo.live_goods.length > 0) {
            for (const goods of vo.live_goods) {
              const idx = findArrayIdx(proData, {Products_ID: goods.Products_ID})
              if (idx !== false) {
                this.selectProductList.push(proData[idx])
                proData[idx].check = true
              }
            }
            this.goods_ids = getArrColumn(this.selectProductList, 'Products_ID').join(',')
          }
        }

        this.$set(this, 'proData', proData)
        // this.proData = objTranslate(proData)

        hideLoading()
      }
    },
    onLoad(options) {
      this.init()
    }

  })

</script>
<style lang="scss">
  @import "../../assets/variables.scss";
  @import "../../assets/mixins.scss";
  .page-wrap{
    padding-bottom: 44px; //.btn的是44px
  }
  .seckill-add{
    min-height: 100vh;
    background-color: #FFFFFF;
  }
  .submits{
     margin: 0rpx auto 50rpx;
     width: 320rpx;
     height: 60rpx;
     background-color: #FFFFFF;
     border: 1px solid #00A8FF;
     border-radius: 6rpx;
     color: #00A8FF;
     font-size: 28rpx;
     line-height: 60rpx;
   }
  .submitq{
    margin: 60rpx auto;
    width: 360rpx;
    height: 60rpx;
    background-color: #FFFFFF;
    border: 1px solid #00A8FF;
    border-radius: 6rpx;
    color: #00A8FF;
    font-size: 28rpx;
    line-height: 60rpx;
  }
  .store-item{
    height: 110rpx;
    width: 710rpx;
    padding: 0rpx 20rpx;
    border-bottom: 1px solid #EBEBEB;
  }
  .titles{
    font-size: 28rpx;
    color: #333333;
  }
  .place{
    color: #999;
  }
  .store-titles{
    display: flex;
    align-items: center;
    color: #999999;
    font-size: 26rpx;
  }

  .product-mbx{
    width: 750rpx;
    box-sizing: border-box;
    height: 230rpx;
    padding: 40rpx 20rpx;
  }
  .thumbs{
    width: 150rpx;
    height: 150rpx;
    margin-right: 24rpx;
    @include cover-img();
  }
  .color-my{
    color: #FF0000;
  }
  .title-my{
    color: #333;
    font-size: 14px;
    /*font-weight: bold;*/
    line-height: 20px;
    height: 40px;
    overflow: hidden;
    text-overflow: ellipsis;
    margin-bottom: 38rpx;
  }
  .content{

    text-align: left;
    height: 110rpx;
    line-height: 110rpx;
  }
  /*商品列表 start*/
  .product-list{
    height: 800rpx;
    overflow: scroll;
  }
  .product-item{
    padding: 30rpx 0;
    background: white;
    margin-bottom: 20rpx;
    .info-box{
      padding: 0 20rpx;
      display: flex;
      font-size: 14px;
      height: 176rpx;
      .check{
        padding-right: 20rpx;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        .check-icon{

        }
      }
      .thumb{
        width: 176rpx;
        height: 176rpx;
        background: #f2f2f2;
      }
      .info{
        flex: 1;
        padding-left: 20rpx;
        .title{
          color: #333;
          font-size: 14px;
          /*font-weight: bold;*/
          line-height: 20px;
          height: 40px;
          overflow: hidden;
          text-overflow: ellipsis;
          margin-bottom: 8px;
        }
        .price-box{
          color: $fun-red-color;
          margin-bottom: 10px;
          font-size: 14px;
        }
        .stock-box{
          font-size: 12px;
          color: #888;
        }
      }
    }
    .actions{
      margin-top: 30rpx;
      font-size: 12px;
      display: flex;
      .action{
        justify-content: center;
        padding: 0;
        flex: 1;
        display: flex;
        align-items: center;
        color: #888;
        border-right: 1rpx solid #e7e7e7;
        &:last-child{
          border-right: none;
        }
        .title{
          padding-left: 8px;
        }
      }
    }
  }
  /*商品列表 end*/


</style>
<config>
  {
  "navigationBarTitleText": "直播设置",
  "navigationBarTextStyle": "black",
  "navigationBarBackgroundColor": "#fff",
  "usingComponents": {
    "wzw-im-tip": "~@/components/wzw-im-tip",
  "err-msg": "~@/components/err-msg",
    "icon": "~@/components/icon",
    "popup-layer": "~@/components/popup-layer",
    "time": "~@/components/time",
  }
  }
</config>
