<template>
  <div v-show="showTree" @touchmove.prevent.stop="noop">
    <div class="mask" @click="close" :style="{opacity:maskOpacity}"></div>
    <div class="wrap" :style="_location">
      <div class="text-center padding10-r">选择行业</div>
      <block v-if="isReady">
        <fun-tree
          ref="tree"
          :tree-data="treeData"
          :showCheckbox="true"
          :checkOnlyLeaf="true"
          :props="propsConf"
          node-key="industry_name"
          @node-expand="handleNodeExpand"
          @node-click="handleNodeClick">
        </fun-tree>
      </block>

      <div @click="subFn" class="btn">提交</div>
    </div>
  </div>
</template>

<script>
  import wepy from '@wepy/core'
  import store from '../../store'
  import pageMixin from '../../mixins'

  const mockData = [
    {
      label: '一级 1',
      children: [{
        label: '二级 1-1',
        children: [{
          label: '三级 1-1-1'
        }]
      }]
    }, {
      label: '一级 2',
      children: [{
        label: '二级 2-1',
        children: [{
          label: '三级 2-1-1'
        }]
      }, {
        label: '二级 2-2',
        children: [{
          label: '三级 2-2-1'
        }]
      }]
    }, {
      label: '一级 3',
      children: [{
        label: '二级 3-1',
        children: [{
          label: '三级 3-1-1'
        }]
      }, {
        label: '二级 3-2',
        children: [{
          label: '三级 3-2-1'
        }]
      }]
    }]
function formateData(origin_data) {
    for (var item of origin_data) {
      item.label = item.industry_name
      if (item.child) {
        item.children = objTranslate(item.child)
        if (item.child && item.child.length > 0) {
          formateData(item.child)
        }
      }
    }
    return origin_data
  }
  /**
   * 对象=>字符串=>对象
   * 一般用于console.log立即显示（有时候虽然在前面打印，但是会由于引用的问题，打印的不是即时结果)
   * 同时可以用于简单粗暴的避免引用传递的对象copy，但是注意这种写法只保留值，会丢失方法
   * @param obj
   */
  const objTranslate = obj => JSON.parse(JSON.stringify(obj))

  wepy.page({
    store,
    mixins: [pageMixin],
    props: {
      show: {
        type: Boolean,
        default: false
      },
      bottomHeight: {
        type: Number || String,
        default: 0
      },
      direction: {
        type: String,
        default: 'top' // 方向  top，bottom，left，right
      }
    },
    data: {
      isReady: false,
      showTree: false,
      timer: null,
      iftoggle: false,
      translateValue: -100, // 位移距离
      treeData: [],
      maskOpacity: 0,
      propsConf: {
        // icon:'iconname',
        children: 'child', // 指定子树为节点对象的某个属性值
        label: 'industry_name', // 指定节点标签为节点对象的某个属性值
        disabled: 'disabled' //	指定节点选择框是否禁用为节点对象的某个属性值
      }
    },
    computed: {
      _translate() {
        const transformObj = {
          'top': `transform:translateY(${-this.translateValue}%)`,
          'bottom': `transform:translateY(${this.translateValue}%)`,
          'left': `transform:translateX(${-this.translateValue}%)`,
          'right': `transform:translateX(${this.translateValue}%)`
        }
        return transformObj[this.direction]
      },
      _location() {
        const positionValue = {
          'top': `bottom:${this.bottomHeight}px;width:100%;`,
          'bottom': 'top:0px;width:100%;',
          'left': 'right:0px;height:100%;',
          'right': 'left:0px;height:100%;'
        }
        return positionValue[this.direction] + this._translate
      }
    },
    watch: {
      show: {
        handler(val) {
          val && this.open()
          !val && this.close()
        }
      }
    },
    async created() {
      bizIndustryList().then(res => {
      // let ret = res.data
        // formateData(ret)

        this.treeData = res.data// mockData
        this.isReady = true
      })
    },
    onLoad() {

    },
    methods: {
      subFn() {
        let checkNodeList = this.$refs.tree.getCheckedNodes()
        console.log(checkNodeList)
        this.$emit('onConfirm', checkNodeList)
      },
      loadNode() {

      },
      noop() {

      },
      close() {
        if (this.timer !== null || !this.iftoggle) {
          return
        }
        this.translateValue = -100
        setTimeout(() => {
          this.showTree = false
          this.timer = null
          this.iftoggle = false
          this.$emit('closeCallBack', null)
          this.$emit('change', false)
          this.$emit('close')
        }, 100)
      },
      open() {
        this.showTree = true
        let _open = setTimeout(() => {
          this.translateValue = 0
          this.maskOpacity = 0.5
          _open = null
        }, 100)
        let _toggle = setTimeout(() => {
          this.iftoggle = true
          _toggle = null
        }, 300)
      },
      // uni-app中emit触发的方法只能接受一个参数
      handleNodeClick(obj) {
        console.log('handleNodeClick', obj)
      },
      handleNodeExpand(obj) {
        console.log('handleNodeExpand', JSON.stringify(obj))
      }
    }

  })

</script>
<style lang="scss">
  .mask{
    position: fixed;
    z-index: 99;
    background: rgb(0, 0, 0);
    opacity: 0;
    height: 100%;
    width: 100%;
    top: 0px;
    left: 0px;
    overflow: hidden;
    transition: all 1s ease;
  }
  .wrap{
    position: fixed;
    left: 0;
    z-index: 100;
    background: #FFFFFF;
    transition: all .3s ease;
    overflow: hidden;
  }
  .btn{
    height: 44px;
    width: 100%;
    background: $wzw-bg-primary;
    color: white;
    line-height: 44px;
    text-align: center;
  }
</style>
<config>
  {
  "usingComponents": {
    "fun-tree": "~@/components/funTree"
    }
  }
</config>
