<style lang="scss">
  @import "../../assets/variables.scss";
  @import "../../assets/mixins.scss";
  .im-card-box{
    position: fixed;
    top: 0;
    bottom: constant(safe-area-inset-bottom);
    bottom: env(safe-area-inset-bottom);
    overflow-y: scroll;
    width: 750rpx;
    background: #e5e5e5;

  }
  .show-new-tip{
    position: fixed;
    transform: translateY(-80px);
    bottom: constant(safe-area-inset-bottom);
    bottom: env(safe-area-inset-bottom);
    right: 20px;
    padding: 4px 10px;
    border-radius: 4px;
    border: 1px solid #e7e7e7;
    font-size: 12px;
    color: $fun-blue-color;
    background: #fff;
    z-index: 9;
  }
  .im-bottom-action{
    position: fixed;
    width: 750rpx;
    left: 0;
    bottom: 0;
    background: #f2f2f2;
    .safearea-space{
      height: constant(safe-area-inset-bottom);
      height: env(safe-area-inset-bottom);
    }
    .onther{
      padding: 40rpx 0;
      display: flex;
      .onther-item{
        width: 96rpx;
        height: 126rpx;
        margin-left: 70rpx;
        text-align: center;
        .label{
          font-size: 28rpx;
          height: 30rpx;
          line-height: 30rpx;
          color: #666;
        }
        .icon-box{
          width: 96rpx;
          height: 96rpx;
        }

      }
    }
    .text{
      display: flex;
      align-items: center;
      width: 750rpx;
      height: 110rpx;
      border-bottom: 1px solid #E2E2E2;
      .input-box{
        margin-left: 20rpx;
        flex: 1;
        display: flex;
        align-items: center;
        .input-ele{
          flex: 1;
          margin-right: 20rpx;
          padding: 0 20rpx;
          background: #fff;
          border: 1px solid #eee;
          height: 70rpx;
          line-height: 70rpx;
          border-radius: 70rpx;
          font-size: 28rpx;
        }
      }
      .submit-btn{
        padding-right: 20rpx;
        height: 110rpx;
        .img-btn{
          margin-top: 31rpx;
          width: 48rpx;
          height: 48rpx;
        }
        .btn{
          width: 120rpx;
          text-align: center;
          line-height: 70rpx;
          height: 70rpx;
          border-radius: 70rpx;
          background: $fun-primary-color;
          color: #fff;
          font-size: 28rpx;
        }
      }
    }

  }
</style>
<template>
  <div class="page-wrap" :style="{width:systemInfo.safeArea.width+'px',height: systemInfo.safeArea.height+'px'}">
    <scroll-view
      scroll-y
      class="im-card-box"
      :scroll-into-view="toViewIdx"
      :style="{paddingBottom:'110rpx'}"
      :refresher-enabled="true"
      :refresher-threshold="100"
      :refresher-triggered="triggered"
      @refresherrestore="onRestore"
      @refresherrefresh="onRefresh"
      @scroll="bindScroll"
      @scrolltolower="bindScrolltolower"
    >
      <block v-for="(chat,idx) in chatList" :key="idx">
        <div class="im-item-box">
          <wzw-im-card
            :msg-id="'msg-'+idx"
            :message="chat"
            @bindProductSend="handleProductSend"
          />
          <!--用来搞事的-->
          <div class="div-line h10" :id="'msg-'+idx"></div>
        </div>
      </block>
      <div :style="{height:'426rpx'}" v-if="showOnther"></div>

    </scroll-view>
    <div class="show-new-tip" :style="{marginBottom:showOnther?'130px':'0px'}" v-if="showNewMsg && !isToLower" @click="showNewMsgFun">
      <icon color="#00A8FF" size="12" type="iconright1" display="inline"></icon>有新消息
    </div>
    <div class="im-bottom-action">
      <div class="text">
        <div class="input-box">
          <input type="text" confirm-type="发送" @confirm="sendMsg" @focus="mode='text'" @blur="inputBlur" class="input-ele"  v-model="tempText" />
        </div>
        <div class="submit-btn" @click="taggleMore">
          <image class="img-btn"  src="/static/im/im-action-more.png"></image>
        </div>
      </div>
      <div class="onther" v-if="showOnther">
        <div class="onther-item" @click="sendImg">
          <image src="/static/im/im-action-img.png" class="icon-box"></image>
          <div class="label">图片</div>
        </div>
        <div class="onther-item" @click="sendCamera">
          <image src="/static/im/im-action-camera.png" class="icon-box"></image>
          <div class="label">拍照</div>
        </div>
      </div>
      <div class="safearea-space"></div>
    </div>
  </div>
</template>
<script>
  import wepy from '@wepy/core'
  import store from '../../store'
  import pageMixin from '../../mixins'
  import { ls, setNavigationBarTitle, getArrColumn, chooseImageByPromise, checkIsLogin } from '../../common/helper'
  import IM from '../../common/Im/Im'

  import { error, modal } from '../../common/fun'
  import {Exception} from '../../common/Exception'
  import eventHub from '../../common/eventHub'

  let imInstance = null

  wepy.page({
    store,
    mixins: [pageMixin],
    data: {
      isToLower: true,
      showNewMsg: false,
      toid: '',
      totype: '',
      isFreshing: false,
      triggered: false,
      mode: '',
      toViewIdx: '',
      showOnther: false,
      imInstance: null,
      imReady: false,
      tempText: ''
    },
    computed: {
      bizInfo () {
        return this.$store.getters.getBizInfo()
      },
      toViewPosition () {
        try {
          // - 1指向最后一个占位的就好了
          return this.imInstance.chatList.length * 1000
        } catch (e) {
          return 0
        }
      },
      chatList () {
        try {
          const list = this.imInstance.chatList
          return list || []
        } catch (e) {
          return []
        }
      }
    },
    methods: {
      showNewMsgFun() {
        this.setViewIdx()
        this.refreshScrollBottomPostion()
        this.showNewMsg = false
      },
      bindScroll(e) {
        console.log(e.$wx)
        this.isToLower = false
      },
      bindScrolltolower() {
        this.isToLower = true
      },
      /**
       * 手动让视图到底部，适用于高度变化的情况
       */
      refreshScrollBottomPostion() {
        const toViewIdx = this.toViewIdx
        this.toViewIdx = ''
        setTimeout(() => {
          this.toViewIdx = toViewIdx
        }, 50)
      },
      // 更新记录用，用于添加的时候
      setViewIdx (val) {
        this.toViewIdx = val || ('msg-' + (this.imInstance.chatList.length - 1))
      },
      async handleProductSend (productInfo) {
        // 发送产品消息
        await imInstance.sendImMessage({ content: productInfo, type: 'prod', isTip: 0 })
        this.setViewIdx()
      },
      onPulling () {
        console.log('onPulling')
      },
      onRefresh () {
        // 无意义，随便的，不让滚动栏滚动到底部而已
        this.setViewIdx('xxx')
        if (this.isFreshing) return
        this.isFreshing = true
        // 界面下拉触发，triggered可能不是true，要设为true
        if (!this.triggered) this.triggered = true

        // 不论成功还是失败
        this.imInstance.getHistory().then(() => {
          this.triggered = false
          this.isFreshing = false
        }).catch(() => {
          this.triggered = false
          this.isFreshing = false
        })
      },
      onRestore () {},
      async sendImg () {
        try {
          const files = await chooseImageByPromise({ sizeType: 1, sourceType: ['album'] }).catch(err => { throw Error(err.errMsg || '选择照片失败') })
          const imgs = getArrColumn(files, 'path')

          await imInstance.sendImMessage({ content: '', type: 'image', tempPath: imgs[0] })
          this.setViewIdx()
        } catch (e) {
          if (e.message !== 'chooseImage:fail cancel')Exception.handle(e)
        }
      },
      async sendCamera () {
        try {
          const files = await chooseImageByPromise({ sizeType: 1, sourceType: ['camera'] }).catch(err => {
            throw Error(err.errMsg || '选择照片失败')
          })
          const imgs = getArrColumn(files, 'path')
          await imInstance.sendImMessage({ content: '', type: 'image', tempPath: imgs[0] })
          this.setViewIdx()
        } catch (e) {
          if (e.message !== 'chooseImage:fail cancel')Exception.handle(e)
        }
      },
      inputBlur () {
        if (!this.tempText) {
          this.mode = ''
        }
      },
      taggleMore () {
        this.showOnther = !this.showOnther
        if (this.showOnther) this.refreshScrollBottomPostion()
      },
      async _init_func (options) {
        const { productId, orderId, origin } = options

        setNavigationBarTitle('Im')
        if (eventHub.imInstance) {
          this.imInstance = imInstance = eventHub.imInstance
        } else {
          this.imInstance = imInstance = new IM({ origin })
        }

        // 设置本地用户信息
        imInstance.setSendInfo({ type: 'biz', id: ls.get('biz_id'), name: this.bizInfo.biz_name, avatar: this.bizInfo.biz_logo })
        // 设置接收人的信息
        imInstance.setReceiveInfo({type: this.totype, id: this.toid})

        // 如果没有start过,就start
        if (this.intervalInstance) {
          await imInstance.start() // 等拿token
        }

        // 先加载一下最近消息
        await imInstance.getHistory()

        // productId, orderId,

        // 商户哪里需要发商品
        // 如果有商品的话，需要加一个商品提示信息
        // if (productId) {
        //   console.log(`有商品${productId}`)
        //   const productInfo = await getProductDetail({ prod_id: productId }).then(res => {
        //     // const { Products_Name, ImgPath, Products_ID, Products_Sales,Products_PriceX,pintuan_pricex,price } = res.data
        //     delete res.data.Products_Description
        //     return res.data // { Products_Name, ImgPath, Products_ID, Products_Sales,Products_PriceX,pintuan_pricex,price }
        //   }).catch(err => { throw Error(err.msg || '获取商品信息错误') })
        //   // isTip为1代表，是显示产品信息，提醒用户发送而已
        //   imInstance.sendImMessage({ content: productInfo, type: 'prod', isTip: 1 })
        // }

        this.setViewIdx()
        this.imReady = true
      },
      sendMsg () {
        if (!this.tempText) {
          error('请输入内容')
          return
        }
        imInstance.sendImMessage({ content: this.tempText })
        this.setViewIdx()
        this.tempText = ''
      },
      bindInputChange (e) {
        this.tempText = e.detail.value
      }
    },
    onReady() {

    },
    onLoad(options) {
      if (!checkIsLogin(1, 0)) return
      const { tid, type } = options
      if (!tid || !type) {
        modal('参数错误')
        return
      }
      this.toid = tid
      this.totype = type
      this._init_func(options)

      eventHub.$on('getMsg', (res) => {
        console.log(res)
        if (this.isToLower) {
          this.setViewIdx()
          this.refreshScrollBottomPostion()
        } else {
          this.showNewMsg = true
        }
      })
    },
    created() {

    }
  })
</script>
<config>
  {
  "navigationBarTitleText": "demo",
  "navigationBarTextStyle": "black",
  "usingComponents": {
    "wzw-im-card":"~@/components/wzw-im-card",
    "icon":"~@/components/icon"
  }
  }
</config>
